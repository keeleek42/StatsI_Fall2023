# Install and load packages
# Adopted from: https://stackoverflow.com/questions/4090169/elegant-way-to-check-for-missing-packages-and-install-them
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)
}
if(!require(lubridate)){
install.packages("lubridate")
library(lubridate)
}
# Get working directory
getwd()
# Set working directory
setwd("/Users/sire/Documents/GitHub/StatsI_Fall2023")
getwd()
# Import movies.csv
df <- read.csv("datasets/movies.csv")
# Check which variables in df are character
char_vecs <- sapply(df, is.character)
# Get values for each character variable
unique <- Map(length, lapply(df[,char_vecs], unique))
# Subset character variables with >2 and <=12 unique values
factors <- names(df[,char_vecs][,unique <= 11 & unique > 2])
# Check which variables in df are character
char_vecs <- sapply(df, is.character)
char_vecs
count(char_vecs)
sum(char_vecs)
view(df)
str(df)
# Get values for each character variable
unique <- Map(length, lapply(df[,char_vecs], unique))
# Get working directory
getwd()
# Set working directory
setwd("/Users/sire/Documents/GitHub/StatsI_Fall2023")
getwd()
# Load data
df_not_tidy <- read.csv("datasets/movies.csv")
# First step, look at data
View(df_not_tidy)
str(df_not_tidy)
head(df_not_tidy)
summary(df_not_tidy)
# Load tidy version of data
# The data is prepared using the data_wraning.R script.
df <- readRDS("datasets/movies.rds")
str(df)
# Load tidy version of data
# The data is prepared using the data_wraning.R script.
df <- readRDS("datasets/movies.rds")
str(df)
# First step, look at data
View(df)
class(df$genre)
levels(df$genre)
# Contingency table
table(df$genre, # Genre
df$critics_rating) # Rating
# Option 1:
# Dataframe subsetting: df[rows, columns]
df_s <- df[df$genre=="Comedy" |
df$genre=="Drama" |
df$genre=="Documentary", ]
View(df_s)
df_s
# Install and load tidyverse
# Adopted from: https://stackoverflow.com/questions/4090169/elegant-way-to-check-for-missing-packages-and-install-them
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)
}
df_s <- subset(df, df$genre %in% c("Comedy","Documentary","Drama"))
View(df_s)
?subset
# Problem: Although we filtered our data
# the underlying levels still exist. Getting rid of
# these, we use the droplevels-function.
class(df_s$genre)
levels(df_s$genre)
df_s$genre <- droplevels(df_s$genre)
# Add marginal distributions
addmargins(table(df_s$genre, # Genre
df_s$critics_rating)) # Rating
# Joint probability
prop.table(table(df_s$genre,
df_s$critics_rating))
63/444
# (A) Conditional probability
# What is the probability of "Rotten",
# conditional on Comedy?
?prop.table()
# Over rows --> Rating conditional on genre
prop.table(table(df_s$genre, # rows
df_s$critics_rating), # columns
margin = 1) # over rows
# Over rows --> Rating conditional on genre
prop.table(table(df_s$genre, # rows
df_s$critics_rating), # columns
margin = 1) # over rows
# Add marginal distributions
# Over rows --> Rating conditional on genre
addmargins(prop.table(table(df_s$genre,
df_s$critics_rating),
margin = 1)) # over rows
# Over rows --> Rating conditional on genre
prop.table(table(df_s$genre, # rows
df_s$critics_rating), # columns
margin = 1) # over rows
# Add marginal distributions
# Over rows --> Rating conditional on genre
addmargins(prop.table(table(df_s$genre,
df_s$critics_rating),
margin = 1)) # over rows
# Round
round(addmargins(prop.table(table(df_s$genre,
df_s$critics_rating),
margin = 1)), 2)
# Over columns --> Genre conditional on rating
addmargins(prop.table(table(df_s$genre, # rows
df_s$critics_rating), # columns
margin = 2)) # over columns
# Bar plot
barplot(prop.table(table(df_s$genre,
df_s$critics_rating), margin=1),
xlab="Ranking",
ylab="Proportions",
main="Critics Rating by Genre",
beside=TRUE,
legend.text = TRUE,
args.legend = list(x=12,
y=0.7,
cex = 0.8,
box.col = "white"))
dev.off()
barplot(prop.table(table(df_s$genre,
df_s$critics_rating),margin=1),
xlab="Ranking",
ylab="Proportions",
main="Critics Rating by Genre",
beside=TRUE,
legend.text = TRUE,
args.legend = list(x=12,
y=0.7,
cex = 0.8,
box.col = "white"))
# Run Chi square test
chisq.test(df_s$genre,
df_s$critics_rating)
# Check p-value
sprintf("%.20f",1.097e-12)
# A little side note, look at residuals
chi <- chisq.test(df_s$genre,
df_s$critics_rating)
