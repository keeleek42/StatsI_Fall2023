# Get working directory
getwd()
# Set working directory
setwd("/Users/sire/Documents/GitHub/StatsI_Fall2023")
getwd()
# Load data
df <- readRDS("datasets/movies.rds")
View(df)
df_s$genre <- droplevels(df_s$genre)
# Dataframe subsetting: df[rows, columns]
df_s <- df[df$genre=="Comedy" |
df$genre=="Drama" |
df$genre=="Documentary", ]
df_s$genre <- droplevels(df_s$genre)
View(df_s)
# Run Chi squared test
chisq.test(df_s$genre,
df_s$critics_rating)
# Check p-value
sprintf("%.20f",1.097e-12)
# Save chi-square test in object
chi_test <- chisq.test(df_s$genre, df_s$critics_rating)
# List objects inside chi_test
ls(chi_test)
chi_test$observed # f_o (observed frequencies)
chi_test$expected # f_e (expected frequencies under the assumption of H0,
# List objects inside chi_test
ls(chi_test)
# Run Chi squared test
chisq.test(df_s$genre,
df_s$critics_rating)
# List objects inside chi_test
ls(chi_test)
chi_test$observed # f_o (observed frequencies)
chi_test$expected # f_e (expected frequencies under the assumption of H0,
# List objects inside chi_test
ls(chi_test)
# Pearson residuals,
# (observed - expected) / sqrt(expected)
chi_test$residuals
chi_test
chi_test
str(chi_test)
# List objects inside chi_test
ls(chi_test)
# **Standardized** residuals,
# (observed - expected) / sqrt(V), where V is the residual cell variance
chi_test$stdres
# Load data
df <- read.csv("datasets/fictional_data.csv")
View(df)
# Scatter plot
plot(df$income,df$edu)
# Calculate correlation
cor(df$income,df$edu)
# Add to scatter plot
text(1200, 7, sprintf("Correlation=%s", round(cor(df$income,df$edu),4)))
df_s$genre <- droplevels(df_s$genre)
View(df_s)
# Run Chi squared test
chisq.test(df_s$genre,
df_s$critics_rating)
# Check p-value
sprintf("%.20f",1.097e-12)
# Save chi-square test in object
chi_test <- chisq.test(df_s$genre, df_s$critics_rating)
# List objects inside chi_test
ls(chi_test)
# List objects inside chi_test
ls(chi_test)
chi_test$observed # f_o (observed frequencies)
chi_test$expected # f_e (expected frequencies under the assumption of H0,
# Pearson residuals,
# (observed - expected) / sqrt(expected)
chi_test$residuals
# Pearson residuals,
# (observed - expected) / sqrt(expected)
chi_test$residuals
# **Standardized** residuals,
# (observed - expected) / sqrt(V), where V is the residual cell variance
chi_test$stdres
# **Standardized** residuals,
# (observed - expected) / sqrt(V), where V is the residual cell variance
chi_test$stdres
# Load data
df <- read.csv("datasets/fictional_data.csv")
View(df)
# Scatter plot
plot(df$income,df$edu)
# Calculate correlation
cor(df$income,df$edu)
# Add to scatter plot
text(1200, 7, sprintf("Correlation=%s", round(cor(df$income,df$edu),4)))
text(1200, 8, sprintf("Correlation=%s", round(cor(df$income,df$edu),4)))
# Improve visualization and save
plot(df$income,
df$edu,
xlab="Monthly net income (in Euro)",
ylab="University level education (in years)",
main="The Relationship between education and income")
text(1200, 8, sprintf("Correlation=%s", round(cor(df$income,df$edu),4)))
# t-test for the correlation coefficient
cor.test(df$income, df$edu)
# Check p-value
sprintf("%.20f",7.52e-07)
# Fit linear regression model
summary(lm(df$income~df$edu))
summary(lm(income~edu, data=df))
# Save model as object
model <- lm(income~edu, data=df)
# t-test for the slope of a regression line
summary(model)
# t-test for the slope of a regression line
summary(model)
250.64/33.06
# Check p-value
sprintf("%.20f",2.17e-06)
# Confidence intervals
confint(model, level=0.95)
confint(model, level=0.99)
