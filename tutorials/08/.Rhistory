sort=FALSE)
df1 <- merge(wb_re,
qog[, c("ccodealp", "year", "cbi_cbiu", "cname_qog")],
by.x=c("date", "iso3c", "country"),
by.y=c("year", "ccodealp", "cname_qog"),
all.x=TRUE,
sort=FALSE)
df1 <- merge(wb_re,
qog[, c("ccodealp", "year", "cbi_cbiu", "cname_qog")],
by.x=c("date", "iso3c", "country"),
by.y=c("year", "ccodealp"),
all.x=TRUE,
sort=FALSE)
df1 <- merge(wb_re,
qog[, c("ccodealp", "year", "cbi_cbiu", "cname_qog")],
by.x=c("date", "iso3c"),
by.y=c("year", "ccodealp"),
all.x=TRUE,
sort=FALSE)
df1 <- merge(wb_re,
qog[, c("ccodealp", "year", "cbi_cbiu", "cname_qog")],
by.x=c("date"),
by.y=c("year"),
all.x=TRUE,
sort=FALSE)
df1 <- merge(wb_re,
qog[, c("ccodealp", "year", "cbi_cbiu", "cname_qog")],
by.x=c("date", "ccodealp", "cname_qog"),
by.y=c("year", "iso3c", "country"),
all.x=FALSE,
sort=FALSE)
df1 <- merge(wb_re,
qog[, c("ccodealp", "year", "cbi_cbiu", "cname_qog")],
by.x=c("date", "ccodealp", "cname_qog"),
by.y=c("year", "iso3c", "country"),
all.x=FALSE,
sort=FALSE)
df1 <- merge(wb_re,
qog[, c("ccodealp", "year", "cbi_cbiu", "cname_qog")],
by.x=c("date", "iso3c", "country"),
by.y=c("year", "ccodealp", "cname_qog"),
all.x=FALSE,
sort=FALSE)
outer_full <- merge(wb_re,
qog[, c("ccodealp", "year", "cbi_cbiu", "cname_qog")],
by = ,
all = TRUE)
View(outer_full)
outer_full <- merge(wb_re,
qog[, c("ccodealp", "year", "cbi_cbiu", "cname_qog")],
by = c("date", "iso3c"),
all = TRUE)
outer_full <- merge(wb_re,
qog[, c("ccodealp", "year", "cbi_cbiu", "cname_qog")],
by.x = c("date", "iso3c"),
all = TRUE)
outer_full <- merge(wb_re,
qog[, c("ccodealp", "year", "cbi_cbiu", "cname_qog")],
by.x = c("date", "iso3c"),
by.y = c("year", "cname_qog")
all = TRUE)
outer_full <- merge(wb_re,
qog[, c("ccodealp", "year", "cbi_cbiu", "cname_qog")],
by.x = c("date", "iso3c"),
by.y = c("year", "cname_qog"),
all = TRUE)
outer_full <- merge(wb_re,
qog[, c("ccodealp", "year", "cbi_cbiu", "cname_qog")],
by.x = c("date", "iso3c"),
by.y = c("year", "cname_qog"),
all = TRUE,
sort = FALSE)
outer_full <- merge(wb_re,
qog[, c("ccodealp", "year", "cbi_cbiu", "cname_qog")],
by.x = c("date", "iso3c"),
by.y = c("year", "cname_qog"),
all = TRUE,
sort = TRUE)
outer_full <- merge(wb_re,
qog[, c("ccodealp", "year", "cbi_cbiu", "cname_qog")],
by.x = c("date", "iso3c"),
by.y = c("year", "cname_qog"),
all = TRUE,
sort = FALSE)
outer_full <- merge(wb_re,
qog[, c("ccodealp", "year", "cbi_cbiu", "cname_qog")],
by.x = c("date", "iso3c"),
by.y = c("year", "ccodealp"),
all = TRUE,
sort = FALSE)
outer_full <- merge(wb_re,
qog[, c("ccodealp", "year", "cbi_cbiu", "cname_qog")],
by.x = c("date", "iso3c", "country"),
by.y = c("year", "ccodealp", "cname_qog"),
all = TRUE,
sort = FALSE)
# Load df
df <- read_csv("df_income_mortality_best.csv")
View(df)
View(df)
# Get unique countries in df
df_uni <- select(df, country) # Select variable
if(!require(wbstats)){
install.packages("wbstats")
library(wbstats)}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)}
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)}
if(!require(stargazer)){
install.packages("stargazer")
library(stargazer)}
# Load zipped data from url
if(!require(readr)){
install.packages("readr")
library(readr)}
# Load zipped data from url
if (!require(readr, character.only = TRUE)) {
install.packages("readr")
library(readr, character.only = TRUE)
}
packages <- c("wbstats", "tidyverse", "ggplot2", "stargazer", "readr")
for (package in packages) {
if (!require(package, character.only = TRUE)) {
install.packages(package)
library(package, character.only = TRUE)
}
}
# Load zipped data from url
if (!require(readr, character.only = TRUE)) {
install.packages("readr")
library(readr, character.only = TRUE)
}
if(!require(readr)){
install.packages("readr")
library(readr)}
for (package in packages) {
if (!require(package, character.only = TRUE)) {
install.packages(package)
library(package, character.only = TRUE)
}
}
# Load zipped data from url
if (!require(readr, character.only = TRUE)) {
install.packages("readr")
library(readr, character.only = TRUE)
}
# Load zipped data from url
if (!require(readr, character.only = TRUE)) {
install.packages("readr")
library(readr, character.only = TRUE)
}
for (package in packages) {
if (!require(package, character.only = TRUE)) {
install.packages(package)
library(package, character.only = TRUE)
}
}
# Load zipped data from url
if (!require(readr, character.only = TRUE)) {
install.packages("readr")
library(readr, character.only = TRUE)
}
if(!require(readr)){
install.packages("readr")
library(readr)}
getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
if(!require(wbstats)){
install.packages("wbstats")
library(wbstats)}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)}
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)}
if(!require(stargazer)){
install.packages("stargazer")
library(stargazer)}
if(!require(readr)){
install.packages("readr")
library(readr)}
# Load df
df <- read_csv("df_income_mortality_best.csv")
# Save df
write.csv(df, "df_income_mortality.csv")
# Merge
df <- merge(wb_re, # Left df
qog[, c("ccodealp","year","bmr_dem")], # Right df
by.x=c("date","iso3c"), # merge variables in left
by.y=c("year","ccodealp"), # merge variables in right
all.x=TRUE, # merge operation, only keep left
sort=FALSE) # Do not sort observations
# Load data from World Bank API
wb <- wb(country=c("AF","BRA","ITA","NGA","SWE","UGA"),
indicator=c("NY.GDP.PCAP.CD", # GDP per capita (current US$)
"SP.POP.TOTL", # Population, total
"SE.SEC.ENRR", #  School enrollment, secondary (% gross)
"SH.DYN.MORT"), # Mortality rate, under-5 (per 1,000 live births)
startdate = 2000, enddate = 2020)
# Reshape data from long to wide
wb_re <- reshape(wb[, c("country","iso3c","date","indicatorID","value")], # df
timevar = "indicatorID",
idvar = c("country","date","iso3c"),
direction = "wide")
# Load Quality of Government data
qog <- read_csv("https://www.qogdata.pol.gu.se/data/qog_bas_ts_jan23.csv")
# Merge
df <- merge(wb_re, # Left df
qog[, c("ccodealp","year","bmr_dem")], # Right df
by.x=c("date","iso3c"), # merge variables in left
by.y=c("year","ccodealp"), # merge variables in right
all.x=TRUE, # merge operation, only keep left
sort=FALSE) # Do not sort observations
# Rename columns
names(df)
names(df)[4] <- "gdp_per_cap"
names(df)[5] <- "pop_size"
names(df)[6] <- "sec_enrol"
names(df)[7] <- "mort"
names(df)[8] <- "democracy"
# Save df
write.csv(df, "df_income_mortality.csv")
# Load df
df <- read_csv("df_income_mortality.csv")
# Load df
df <- read_csv("df_income_mortality_best.csv")
# Load df
df <- read_csv("df_income_mortality.csv")
# Get unique countries in df
df_uni <- select(df, country) # Select variable
View(df_uni)
df_uni <- distinct(df_uni, country) # Get unique values
df_uni
# Get unique countries in df, using the pipe
df %>%
select(country) %>%
distinct(country)
# Filter (subset is base R)
df_s <- filter(df, country %in% c("Afghanistan","Italy"))
View(df_s)
df_s
# Get the mean income and max child mortality for each year
df_grouped <- group_by(df, date) # Group by year
df_mean_inc <- summarize(df_grouped,
n=n(), # Counts
mean_inc=mean(gdp_per_cap), # Mean
max_mort=max(mort)) # Max
df_mean_inc
View(df_grouped)
df_grouped
df_grouped
df_mean_inc
# Check if df has missing values
sum(is.na(df$gdp_per_cap))
sum(is.na(df$mort))
# Option I: Replace missing values with zero, but be careful!
df_na <- replace(df, is.na("gdp_per_cap"), 0) # one variable
df_na <- df %>% replace(is.na(.), 0) # all variables
df_na <- df %>% replace(is.na(.), 0) # all variables
View(df_na)
# Option I: Replace missing values with zero, but be careful!
df_na <- replace(df, is.na("gdp_per_cap"), 0) # one variable
# Option I: Replace missing values with zero, but be careful!
df_na <- replace(df, is.na("gdp_per_cap"), 0)
View(df_na)
# Option II: Replace missing values with mean
df_na <- df # Copy
View(df_na)
df_na$gdp_per_cap <- replace_na(data=df_na$gdp_per_cap,
replace=mean(df_na$gdp_per_cap, # Value to replace NA with
na.rm = TRUE))
df_na
View(df_na)
# Re-coding variables, in tidyverse
# Create categorical income variable
quantile(df_na$gdp_per_cap) # Check quantiles
?quantile
# Re-coding variables, in tidyverse
# Create categorical income variable
quantile(df_na$gdp_per_cap) # Check quantiles
df_na <- mutate(df_na, income_cat2=cut(gdp_per_cap, # Variable
breaks=quantile(df_na$gdp_per_cap), # Breaks
labels=c("low","medium_low","medium_high","high"))) # Labels
is.factor(df_na$income_cat2)
# Drop missing values
df <- df[complete.cases(df), ]
View(df)
# Get the mean income for democracies and autocracies.
mean(df$gdp_per_cap$0)
# Get the mean income for democracies and autocracies.
mean(df$gdp_per_cap==0)
# Get the mean income for democracies and autocracies.
mean[df$gdp_per_cap==0]
# Get the mean income for democracies and autocracies.
mean[df$gdp_per_cap==0,]
# Get the mean income for democracies and autocracies.
mean(df[df$gdp_per_cap==0,])
# Get the mean income for democracies and autocracies.
mean(df_na[df_na$democracy==0,]$gdp_per_cap)
# Get the mean income for democracies and autocracies.
mean(df[df$democracy==0,]$gdp_per_cap)
mean(df_na[df_na$democracy==1,]$gdp_per_cap)
# Get the mean income for Afghanistan.
mean(df_na[df_na$country$"Afghanistan"])
# Get the mean income for Afghanistan.
mean(df_na[df_na$country=='Afghanistan',]$gdp_per_cap)
# Create a variable, which measures the t-1 lag of GDP per capita.
df_na_g <- arrange(df_na, country, date) # Important, sort rows beforehand!
df_na_g
df_na_g <- group_by(df_na_g, country) # Group by country
df_na_g
df_na <- mutate(df_na_g,
income_lag = lag(gdp_per_cap, n = 1)) # Calculate t-1 lag
df_na
df_na
View(df_na)
# Create a variable, which measure regime change.
df_na_g <- group_by(df_na, country) # Group data by country
df_na <- mutate(df_na_g,
democracy_lag = lag(democracy, n = 1)) # Calculate t-1 lag
# Step 2: Recode
df_na$regime_change <- 0 # Create empty variable
# Replace with 1 if current regime type is the same as t-1 regime type
df_na$regime_change[df_na$democracy_lag!=df_na$democracy] <- 1
# Replace with 1 if current regime type is the same as t-1 regime type
df_na$regime_change[df_na$democracy_lag!=df_na$democracy] <- 1
# Replace with 1 if current regime type is the same as t-1 regime type
df_na$regime_change[df_na$democracy_lag!=df_na$democracy] <- 1
# Scatter plot
scatter <-
ggplot(data = df_na, # --> data
mapping = aes(x = gdp_per_cap,
y = mort)) +  # --> aesthetic mapping
geom_point() # --> geometric object, scatter plot
scatter <-
ggplot(data = df_na, # --> data
mapping = aes(x = gdp_per_cap,
y = mort)) +  # --> aesthetic mapping
geom_point() # --> geometric object, scatter plot
# Print plot object
scatter
# Scatter plot, log-transform income
hist(df_na$gdp_per_cap)
hist(log(df_na$gdp_per_cap))
# Scatter plot, log-transform income
hist(df_na$gdp_per_cap)
scatter
# Scatter plot
scatter <-
ggplot(data = df_na,
mapping = aes(x = log(gdp_per_cap), # log-transform
y = mort)) +
geom_point()
scatter
# Scatter plot
scatter <-
ggplot(data = df_na,
mapping = aes(x = log(gdp_per_cap), # log-transform
y = mort,
size = sec_enrol)) +
geom_point()
scatter
ggsave(scatter, file = "scatter.png")
scatter
scatter <- ggplot(data = df_na,
mapping = aes(x = log(gdp_per_cap), # log-transform
y = mort,
size = sec_enrol)) +
geom_point()  +
labs(x = "GDP per capita (log)", # Add labels
y = "Child mortality",
size = "Population size") +
theme_classic() + # Change theme
theme(legend.box.background = element_rect(size = 0.1), # Change background
legend.position = c(0.85, 0.85)) # Change position of legend
ggsave(scatter, file = "scatter.png")
scatter
# Add a regression line to your scatter plot.
abline(scatter)
# Add a regression line to your scatter plot.
scatter <- abline(scatter)
scatter
scatter
scatter <- ggplot(df_na,
mapping = aes(x=log(gpd_per_cap),
y = mort,
size = sec_enrol) +
geom_abline())
scatter <- ggplot(df_na,
mapping = aes(x=log(gpd_per_cap),
y = mort) +
geom_abline())
scatter <-
ggplot(data = df_na,
mapping = aes(x = log(gdp_per_cap),
y = mort)) +
geom_point() +
geom_smooth(method='lm',col="orange") # Add regression line
scatter
scatter <-
ggplot(data = df_na,
mapping = aes(x = log(gdp_per_cap),
y = mort,
size = sec_nerol)) +
geom_point() +
geom_smooth(method='lm',col="orange") # Add regression line
scatter
scatter
scatter <-
ggplot(data = df_na,
mapping = aes(x = log(gdp_per_cap),
y = mort,
size = sec_nerol)) +
geom_smooth(method='lm',col="orange") # Add regression line
scatter
scatter <-
ggplot(data = df_na,
mapping = aes(x = log(gdp_per_cap),
y = mort,
size = sec_enrol)) +
geom_smooth(method='lm',col="orange") # Add regression line
scatter
scatter <-
ggplot(data = df_na,
mapping = aes(x = log(gdp_per_cap),
y = mort,
size = sec_enrol)) +
geom_point()
geom_smooth(method='lm',col="orange") # Add regression line
scatter
scatter <-
ggplot(data = df_na,
mapping = aes(x = log(gdp_per_cap),
y = mort,
size = sec_enrol)) +
geom_point() +
geom_smooth(method='lm',col="orange") # Add regression line
scatter
# Create a new "scatter plot", which differentiates between
# democracies and autocracies. Add the regression lines.
scatter <-
ggplot(data = df_na,
mapping = aes(x = factor(democracy), # Over regime type
y = mort,
col = factor(democracy))) +
geom_point()
scatter
# Fit model
model <- lm(mort ~ gdp_per_cap, data=df_na)
summary(model)
# Re-scale income
df_na$gdp_per_cap_1000 <- df_na$gdp_per_cap/1000
model <- lm(mort ~ gdp_per_cap_1000, data=df_na)
summary(model)
# Export Latex table
stargazer(model)
# Fit model
model <- lm(mort ~ democracy, data=df_na)
summary(model)
# Add regression lines
scatter <-
ggplot(data = df_na,
mapping = aes(x = factor(democracy), # Over regime type
y = mort,
col = factor(democracy))) +
geom_point() +
geom_hline(yintercept=model$coefficients[1],col="red") + # Autocracies
geom_hline(yintercept=model$coefficients[1]+model$coefficients[2],col="turquoise") # Democracies
scatter
# Equal to the mean differentiated by regime type
mean(df_na[df_na$democracy==0,]$mort)
mean(df_na[df_na$democracy==1,]$mort)
model$coefficients[1]+model$coefficients[2]
# Access regression coefficients
model <- lm(mort ~ democracy, data=df_na)
summary(model)
model$coefficients
model$coefficients[1]
# Add regression lines
scatter <-
ggplot(data = df_na,
mapping = aes(x = factor(democracy), # Over regime type
y = mort,
col = factor(democracy))) +
geom_point() +
geom_hline(yintercept=model$coefficients[1],col="red") + # Autocracies
geom_hline(yintercept=model$coefficients[1]+model$coefficients[2],col="turquoise") # Democracies
# Equal to the mean differentiated by regime type
mean(df_na[df_na$democracy==0,]$mort)
mean(df_na[df_na$democracy==1,]$mort)
model$coefficients[1]+model$coefficients[2]
# Fit model
model <- lm(mort ~ democracy, data=df_na)
summary(model)
# What is the relationship between income and armed conflict?
model <- lm(best~gdp_per_cap, data=df_na)
summary(model)
model <- lm(best~gdp_per_cap_1000, data=df_na)
summary(model)
# Scatter plot
scatter <-
ggplot(data = df_na,
mapping = aes(x = gdp_per_cap_1000,
y = best)) +
geom_point() +
geom_smooth(method='lm',col="black")
scatter
